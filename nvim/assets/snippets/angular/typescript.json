{
  "Angular Component": {
    "prefix": "a-component",
    "description": "Angular component",
    "body": [
      "import { Component } from '@angular/core';",
      "",
      "@Component({",
      "\tselector: '${1:selector-name}',",
      "\ttemplateUrl: '${2:name}.component.html',",
      "\tstyleUrl: '${2:name}.component.scss',",
      "})",
      "export class ${3:Name}Component {",
      "\tconstructor() { }",
      "}"
    ]
  },
  "Angular Component (Standalone)": {
    "prefix": "a-component-standalone",
    "description": "Angular component standalone",
    "body": [
      "import { ChangeDetectionStrategy, Component } from '@angular/core';",
      "",
      "@Component({",
      "\tstandalone: true,",
      "\tselector: '${1:selector-name}',",
      "\ttemplateUrl: '${2:name}.cmp.html',",
      "\tstyleUrl: '${2:name}.cmp.scss',",
      "\tchangeDetection: ChangeDetectionStrategy.OnPush,",
      "})",
      "export class ${3:Name}Cmp {",
      "\tconstructor() { }",
      "}"
    ]
  },
  "Angular Component (Inline Template)": {
    "prefix": "a-component-inline",
    "description": "Angular component with an inline template",
    "body": [
      "import { Component } from '@angular/core';",
      "",
      "@Component({",
      "\tselector: '${1:selector-name}',",
      "\ttemplate: `$0`",
      "})",
      "",
      "export class ${2:Name}Component {",
      "\tconstructor() { }",
      "}"
    ]
  },
  "Angular Pipe": {
    "prefix": "a-pipe",
    "description": "Angular pipe",
    "body": [
      "import { Pipe, PipeTransform } from '@angular/core';",
      "",
      "@Pipe({",
      "\tname: '${1:selector-name}'",
      "})",
      "",
      "export class ${2:Name}Pipe implements PipeTransform {",
      "\ttransform(value: any, ...args: any[]): any {",
      "\t\t$0",
      "\t}",
      "}"
    ]
  },
  "Angular Pipe (Standalone)": {
    "prefix": "a-pipe-standalone",
    "description": "Angular pipe standalone",
    "body": [
      "import { Pipe, PipeTransform } from '@angular/core';",
      "",
      "@Pipe({",
      "\tstandalone: true,",
      "\tname: '${1:selector-name}',",
      "\timports: [],",
      "})",
      "",
      "export class ${2:Name}Pipe implements PipeTransform {",
      "\ttransform(value: any, ...args: any[]): any {",
      "\t\t$0",
      "\t}",
      "}"
    ]
  },
  "Angular Service": {
    "prefix": "a-service",
    "description": "Angular Service with Injectable ProvidedIn Root",
    "body": [
      "import { Injectable } from '@angular/core';",
      "",
      "@Injectable({providedIn: ${1:'root'}})",
      "export class ${2:ServiceName}Service {",
      "\tconstructor() { }",
      "\t$0",
      "}"
    ]
  },
  "Angular Route (Default Path)": {
    "prefix": "a-route-path-default",
    "description": "Angular default route path",
    "body": ["{ path: '', pathMatch: 'full', redirectTo: '${1:path}' },$0"]
  },
  "Angular Route (Path with Children)": {
    "prefix": "a-route-path-with-children",
    "description": "Angular route path with children",
    "body": [
      "{",
      "\tpath: '${1:path}', ",
      "\tcomponent: ${2:Component},",
      "\tchildren: [",
      "\t\t{ path: '${3:childpath}', component: ${4:ChildComponent} }",
      "\t]",
      "},$0"
    ]
  },
  "Angular Route (404 Path)": {
    "prefix": "a-route-path-404",
    "description": "Angular 404 route path",
    "body": ["{ path: '**', component: ${1:PathNotFoundComponent} },$0"]
  },
  "Angular Route Path (Eager)": {
    "prefix": "a-route-path-eager",
    "description": "Angular eager route path",
    "body": ["{ path: '${1:path}', component: ${2:Name}Component },$0"]
  },
  "Angular Route Path (Lazy)": {
    "prefix": "a-route-path-lazy",
    "description": "Angular lazy route path",
    "body": [
      "{",
      "\tpath: '${1:path}', ",
      "\tloadChildren: () => import('${2:lazy-path}').then(m => m.${3:lazy-module})",
      "},$0"
    ]
  },
  "Angular Service (HttpClient)": {
    "prefix": "a-service-httpclient",
    "description": "Angular service with HttpClient",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { HttpClient } from '@angular/common/http';",
      "",
      "@Injectable({providedIn: ${1:'root'}})",
      "export class ${2:ServiceName}Service {",
      "\tconstructor(private httpClient: HttpClient) { }",
      "\t$0",
      "}"
    ]
  },
  "Angular Interceptor (Http Logging)": {
    "prefix": "a-http-interceptor-logging",
    "description": "Angular HttpInterceptor for Logging HttpClient",
    "body": [
      "import { HttpInterceptor, HttpHandler, HttpRequest, HttpEvent, HttpResponse } from '@angular/common/http';",
      "import { Observable } from 'rxjs';",
      "import { tap } from 'rxjs/operators';",
      "",
      "@Injectable()",
      "export class LogInterceptor implements HttpInterceptor {",
      "\tconstructor() {}",
      "",
      "\tintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {",
      "\t\tconst started = Date.now();",
      "\t\treturn next.handle(req).pipe(",
      "\t\t\ttap(event => {",
      "\t\t\t\tif (event instanceof HttpResponse) {",
      "\t\t\t\t\tconst elapsed = Date.now() - started;",
      "\t\t\t\t\tconsole.log(`Request for \\${req.urlWithParams} took \\${elapsed} ms.`);",
      "\t\t\t\t}",
      "\t\t\t})",
      "\t\t);",
      "\t}",
      "}"
    ]
  },
  "Angular Interceptor (Http Headers)": {
    "prefix": "a-http-interceptor-headers",
    "description": "Angular HttpInterceptor for headers HttpClient",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';",
      "import { Observable } from 'rxjs';",
      "",
      "@Injectable()",
      "export class HeaderInterceptor implements HttpInterceptor {",
      "\tconstructor() {}",
      "",
      "\tintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {",
      "\t\tconst headers = req.headers",
      "\t\t\t.set('Content-Type', 'application/json');",
      "\t\tconst authReq = req.clone({ headers });",
      "\t\treturn next.handle(authReq);",
      "\t}",
      "}"
    ]
  },
  "Angular Interceptor (Http Empty)": {
    "prefix": "a-http-interceptor",
    "description": "Empty Angular HttpInterceptor for HttpClient",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { HttpInterceptor, HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';",
      "import { Observable } from 'rxjs';",
      "",
      "@Injectable()",
      "export class ${2:Your}Interceptor implements HttpInterceptor {",
      "\tintercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {",
      "\t\treturn next.handle(req);",
      "\t}",
      "}"
    ]
  },
  "Angular Module (Root)": {
    "prefix": "a-module-root",
    "description": "Angular Root Module",
    "body": [
      "import { NgModule } from '@angular/core';",
      "import { BrowserModule  } from '@angular/platform-browser';",
      "import { HttpModule } from '@angular/http';",
      "",
      "import { ${1:App}Component } from './${2:app}.component';",
      "",
      "@NgModule({",
      "\timports: [",
      "\t\tBrowserModule,",
      "\t\tHttpModule,",
      "\t],",
      "\tdeclarations: [${1:App}Component],",
      "\tbootstrap: [${1:App}Component],",
      "})",
      "export class ${1:App}Module { }",
      "$0"
    ]
  },
  "Angular Module (Feature)": {
    "prefix": "a-module-feature",
    "description": "Angular Feature Module",
    "body": [
      "import { NgModule } from '@angular/core';",
      "import { CommonModule  } from '@angular/common';",
      "",
      "import { ${1:Feature}Component } from './${2:feature}.component';",
      "",
      "@NgModule({",
      "\tdeclarations: [${1:Feature}Component],",
      "\timports: [CommonModule],",
      "})",
      "export class ${1:Feature}Module { }",
      "$0"
    ]
  },
  "Angular Directive": {
    "prefix": "a-directive",
    "description": "Angular directive",
    "body": [
      "import { Directive } from '@angular/core';",
      "",
      "@Directive({ selector: '[${1:selector-name}]' })",
      "export class ${2:Name}Directive {",
      "\tconstructor() { }",
      "}"
    ]
  },
  "Angular Directive (Standalone)": {
    "prefix": "a-directive-standalone",
    "description": "Angular directive for standalone",
    "body": [
      "import { Directive } from '@angular/core';",
      "",
      "@Directive({",
      "\tstandalone: true,",
      "\tselector: '[${1:selector-name}],'",
      "\timports: [],",
      "})",
      "export class ${2:Name}Directive {",
      "\tconstructor() { }",
      "}"
    ]
  },
  "Angular Guard (CanActivate)": {
    "prefix": "a-guard-can-activate",
    "description": "Angular CanActivate guard",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';",
      "",
      "@Injectable({providedIn: ${1:'root'}})",
      "export class ${2:Name}Guard implements CanActivate {",
      "\tconstructor() { }",
      "",
      "\tcanActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {",
      "\t\treturn true;$0",
      "\t}",
      "}"
    ]
  },
  "Angular Guard (CanActivateChild)": {
    "prefix": "a-guard-can-activate-child",
    "description": "Angular CanActivateChild guard",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { ActivatedRouteSnapshot, CanActivateChild, RouterStateSnapshot } from '@angular/router';",
      "",
      "@Injectable({providedIn: ${1:'root'}})",
      "export class ${2:Name}Guard implements CanActivateChild {",
      "\tconstructor() { }",
      "",
      "\tcanActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {",
      "\t\treturn true;$0",
      "\t}",
      "}"
    ]
  },
  "Angular Guard (CanLoad)": {
    "prefix": "a-guard-can-load",
    "description": "Angular CanLoad guard",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { CanLoad, Route } from '@angular/router';",
      "",
      "@Injectable({providedIn: ${1:'root'}})",
      "export class ${2:Name}Guard implements CanLoad {",
      "\tconstructor() { }",
      "",
      "\tcanLoad(route: Route) {",
      "\t\treturn true;$0",
      "\t}",
      "}"
    ]
  },
  "Angular Guard (CanDeactivate)": {
    "prefix": "a-guard-can-deactivate",
    "description": "Angular CanDeactivate guard",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { ActivatedRouteSnapshot, CanDeactivate, RouterStateSnapshot } from '@angular/router';",
      "import { Observable } from 'rxjs';",
      "",
      "import { ${2:ComponentName}Component } from './${3:filename}.component';",
      "",
      "// Consider using this interface for all CanDeactivate guards,",
      "// and have your components implement this interface, too.",
      "//",
      "//   e.g. export class CanDeactivateGuard implements CanDeactivate<CanComponentDeactivate> {",
      "//",
      "// export interface CanComponentDeactivate {",
      "// canDeactivate: () => any;",
      "// }",
      "",
      "@Injectable({providedIn: ${4:'root'}})",
      "export class ${1:Name}Guard implements CanDeactivate<${2:ComponentName}Component> {",
      "\tcanDeactivate(",
      "\t\tcomponent: ${2:ComponentName}Component,",
      "\t\tcurrentRoute: ActivatedRouteSnapshot, ",
      "\t\tcurrentState: RouterStateSnapshot",
      "\t): Observable<boolean>|Promise<boolean>|boolean {",
      "\t\treturn false;$0",
      "\t}",
      "}"
    ]
  },
  "Angular Resolver": {
    "prefix": "a-resolver",
    "description": "Angular Resolver",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { Resolve, ActivatedRouteSnapshot } from '@angular/router';",
      "import { Observable } from 'rxjs';",
      "",
      "@Injectable({ providedIn: ${1:'root'} })",
      "export class ${2:YourResolver} implements Resolve<${3:ObjectToResolve}> {",
      "\tresolve(route: ActivatedRouteSnapshot): Observable<${3:ObjectToResolve}> | Promise<${3:ObjectToResolve}> | ${3:ObjectToResolve} {",
      "\t\treturn ${0};",
      "\t}",
      "}"
    ]
  },
  "Angular Preload Strategy (Network-Aware)": {
    "prefix": "a-preload-network-strategy",
    "description": "Angular network aware preload strategy",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { PreloadingStrategy, Route } from '@angular/router';",
      "import { Observable, EMPTY } from 'rxjs';",
      "",
      "// avoid typing issues for now",
      "export declare var navigator;",
      "",
      "@Injectable({ providedIn: 'root' })",
      "export class NetworkAwarePreloadStrategy implements PreloadingStrategy {",
      "\tpreload(route: Route, load: () => Observable<any>): Observable<any> {",
      "\t\treturn this.hasGoodConnection() ? load() : EMPTY;",
      "\t}",
      "",
      "\thasGoodConnection(): boolean {",
      "\t\tconst conn = navigator.connection;",
      "\t\tif (conn) {",
      "\t\t\tif (conn.saveData) {",
      "\t\t\t\treturn false; // save data mode is enabled, so dont preload",
      "\t\t\t}",
      "\t\t\tconst avoidTheseConnections = ['slow-2g', '2g' /* , '3g', '4g' */];",
      "\t\t\tconst effectiveType = conn.effectiveType || '';",
      "\t\t\tif (avoidTheseConnections.includes(effectiveType)) {",
      "\t\t\t\treturn false;",
      "\t\t\t}",
      "\t\t}",
      "\t\treturn true;",
      "\t}",
      "}"
    ]
  },
  "Angular Router (Events)": {
    "prefix": "a-router-on-event",
    "description": "Angular Router Events",
    "body": [
      "checkEvents() {",
      "\tthis.router.events.subscribe(event => {",
      "\t\tswitch (true) {",
      "\t\t\tcase event instanceof ${1:eventName}:",
      "\t\t\t\t$0",
      "\t\t\t\tbreak;",
      "",
      "\t\t\tdefault:",
      "\t\t\t\tbreak;",
      "\t\t}",
      "\t});",
      "}"
    ]
  },
  "Angular TrackBy": {
    "prefix": "a-trackby",
    "description": "TrackBy Function",
    "body": [
      "${1:trackBy}(index: number, ${2:name}: ${3:model}): ${4:number} {",
      "  return ${2:name}${5:.id};$0",
      "}"
    ]
  },
  "RxJs Import": {
    "prefix": "a-rxjs-import",
    "description": "RxJs import",
    "body": ["import { ${1:Observable} } from 'rxjs';", "$0"]
  },
  "NgRx Store Module (Root)": {
    "prefix": "a-ngrx-root-module",
    "description": "NgRx Store Module",
    "body": [
      "import { NgModule, isDevMode } from '@angular/core';",
      "import { EffectsModule } from '@ngrx/effects';",
      "import { StoreModule } from '@ngrx/store';",
      "import { StoreDevtoolsModule } from '@ngrx/store-devtools';",
      "",
      "@NgModule({",
      "  imports: [",
      "    StoreModule.forRoot({}),",
      "    EffectsModule.forRoot([]),",
      "    StoreDevtoolsModule.instrument({ logOnly: !isDevMode() }),",
      "  ]",
      "})",
      "export class ${1:Store}Module {}"
    ]
  },
  "NgRx Create Action": {
    "prefix": "a-ngrx-create-action",
    "description": "Creates an NgRx Action",
    "body": [
      "export const ${1:action} = createAction('[${2:Prefix}] ${3:Event Name}', props<any>());"
    ]
  },
  "NgRx Create Reducer": {
    "prefix": "a-ngrx-create-reducer",
    "description": "Creates an NgRx Reducer",
    "body": [
      "const ${1:feature}Reducer = createReducer(",
      "\tinitialState,",
      "\ton($1Actions.action, state => ({ ...state, ${2:prop}: ${3:updatedValue} })),",
      ");",
      "",
      "export function reducer(state: State | undefined, action: Action) {",
      "\treturn $1Reducer(state, action);",
      "}"
    ]
  },
  "NgRx Create Effect": {
    "prefix": "a-ngrx-create-effect",
    "description": "Creates an NgRx Effect",
    "body": [
      "${1:effectName}$ = createEffect(() => {",
      "\treturn this.actions$.pipe(",
      "\t\t\tofType(${2:action}),",
      "\t\t\t/** An EMPTY observable only emits completion. Replace with your own observable stream */",
      "\t\t\t${3:operator}(() => ${4:EMPTY}));",
      "});"
    ]
  },
  "NgRx Create Selector": {
    "prefix": "a-ngrx-create-selector",
    "description": "Creates an NgRx Selector",
    "body": [
      "export const select${1:Feature}${2:Property} = createSelector(",
      "\tselect$1,",
      "\t(state: $1State) => state.${3:property}",
      ");"
    ]
  },
  "Angular Guard (CanMatch)": {
    "prefix": "a-can-match",
    "description": "Angular CanMatch Route Guard (functional)",
    "body": [
      "import { inject } from '@angular/core';",
      "import { CanActivateFn, Router } from '@angular/router';",
      "import { map, of, tap } from 'rxjs';",
      "",
      "export function ${1:Name}Guard(role: string): CanActivateFn {",
      "\treturn () => {",
      "\t\tconst router = inject(Router);",
      "\t\treturn of('admin').pipe(",
      "\t\t\tmap((admin) => role === admin),",
      "\t\t\ttap((isAdmin) => {",
      "\t\t\t\tif (!isAdmin) {",
      "\t\t\t\t\trouter.navigateByUrl('/403');",
      "\t\t\t\t}",
      "\t\t\t}),",
      "\t\t);",
      "\t};",
      "}"
    ]
  },
  "Angular ResolveFn": {
    "prefix": "a-resolve-fn",
    "description": "Angular Resolver (functional)",
    "body": [
      "import { inject } from '@angular/core';",
      "import {",
      "\tActivatedRouteSnapshot,",
      "\tResolveFn,",
      "\tRouter,",
      "\tRouterStateSnapshot,",
      "} from '@angular/router';",
      "import { filter, interval, take } from 'rxjs';",
      "",
      "export const ${1:name}Resolver: ResolveFn<number> = (",
      "\troute: ActivatedRouteSnapshot,",
      "\tstate: RouterStateSnapshot,",
      "\trouter = inject(Router),",
      ") => {",
      "\tconst isOdd = route.data['isOdd']",
      "\t? route.data['isOdd']()",
      "\t: (x: number) => x % 2 === 0;",
      "\treturn interval(500).pipe(filter(isOdd), take(1));",
      "};"
    ]
  },

  "Ngrx Entity Data": {
    "prefix": "a-ngrx-entity-data",
    "description": "NGRX Entity Data",
    "body": [
      "import { EnvironmentProviders, inject, Injectable, makeEnvironmentProviders  } from '@angular/core';",
      "import { Actions, createEffect, ofType, provideEffects } from '@ngrx/effects';",
      "import { createEntityAdapter, EntityState } from '@ngrx/entity';",
      "import {",
      "\tcreateAction,",
      "\tcreateFeature,",
      "\tcreateReducer,",
      "\tcreateSelector,",
      "\ton,",
      "\tprops,",
      "\tprovideState,",
      "} from '@ngrx/store';",
      "import { catchError, map, Observable, of, switchMap } from 'rxjs';",
      "",
      "export interface ${1:Feature} {",
      "\tid: string;",
      "}",
      "",
      "@Injectable()",
      "export class $1ApiService {",
      "\tputOne(body: $1): Observable<$1> {",
      "\t\treturn of(body);",
      "\t}",
      "}",
      "",
      "export interface $1State extends EntityState<$1> {",
      "\ttotal: number;",
      "\terror: Error | null;",
      "\tisLoading: boolean;",
      "}",
      "",
      "const ACTIONS = {",
      "\tADD_ONE: '[Feature/Api] Add One',",
      "\tADD_ONE_SUCCESS: '[Feature/Api] Add One Success',",
      "\tADD_ONE_FAILURE: '[Feature/Api] Add One Failure',",
      "} as const;",
      "",
      "export const ${2:feature}StoreActions = {",
      "\taddOne: createAction(ACTIONS.ADD_ONE, props<{ data: $1 }>()),",
      "\taddOneSuccess: createAction(",
      "\t\tACTIONS.ADD_ONE_SUCCESS,",
      "\t\tprops<{ data: $1 }>(),",
      "\t),",
      "\taddOneFailure: createAction(",
      "\t\tACTIONS.ADD_ONE_FAILURE,",
      "\t\tprops<{ error: Error }>(),",
      "\t),",
      "} as const;",
      "",
      "const selectId = ($2: $1) => $2.id;",
      "",
      "const adapter = createEntityAdapter({ selectId });",
      "",
      "const initialState: $1State = adapter.getInitialState({",
      "\tisLoading: false,",
      "\terror: null,",
      "\ttotal: 0,",
      "});",
      "",
      "export const $2State = createFeature({",
      "\tname: '$2',",
      "",
      "\treducer: createReducer(",
      "\t\tinitialState,",
      "",
      "\t\ton($2StoreActions.addOne, (state) => {",
      "\t\t\treturn {",
      "\t\t\t\t...state,",
      "\t\t\t\tisLoading: true,",
      "\t\t\t};",
      "\t\t}),",
      "",
      "\t\ton($2StoreActions.addOneSuccess, (state, action) => {",
      "\t\t\treturn adapter.addOne(action.data, {",
      "\t\t\t\t...state,",
      "\t\t\t\tisLoading: false,",
      "\t\t\t});",
      "\t\t}),",
      "",
      "\t\ton($2StoreActions.addOneFailure, (state, { error }) => {",
      "\t\t\treturn {",
      "\t\t\t\t...state,",
      "\t\t\t\tisLoading: false,",
      "\t\t\t\terror,",
      "\t\t\t};",
      "\t\t}),",
      "\t),",
      "",
      "\textraSelectors: ({",
      "\t\tselect$1State: feature,",
      "\t\tselectEntities,",
      "\t}) => {",
      "\t\tconst entitySelectors = adapter.getSelectors();",
      "\t\treturn {",
      "\t\t\tselectIds: createSelector(feature, entitySelectors.selectIds),",
      "\t\t\tselectAll: createSelector(feature, entitySelectors.selectAll),",
      "\t\t\tselectOne: (id: string | undefined) =>",
      "\t\t\t\tcreateSelector(selectEntities, (entities) => {",
      "\t\t\t\t\treturn id ? entities[id] : undefined;",
      "\t\t\t\t}),",
      "\t\t\tselectListPageViewModel: createSelector(feature, (state) => ({",
      "\t\t\t\tlist: entitySelectors.selectAll(state),",
      "\t\t\t\tisLoading: state.isLoading,",
      "\t\t\t\ttotal: state.total,",
      "\t\t\t\terror: state.error,",
      "\t\t\t})),",
      "\t\t};",
      "\t},",
      "});",
      "",
      "namespace $2StoreEffects {",
      "\texport const putOne$ = createEffect(",
      "\t\t($ = inject(Actions), dataApi = inject($1ApiService)) => {",
      "\t\t\treturn $.pipe(",
      "\t\t\t\tofType($2StoreActions.addOne),",
      "\t\t\t\tswitchMap(({ data }) => {",
      "\t\t\t\t\treturn dataApi.putOne(data).pipe(",
      "\t\t\t\t\t\tmap((resp) =>",
      "\t\t\t\t\t\t\t$2StoreActions.addOneSuccess({",
      "\t\t\t\t\t\t\t\tdata: resp",
      "\t\t\t\t\t\t\t}),",
      "\t\t\t\t\t\t),",
      "\t\t\t\t\t\tcatchError((error) =>",
      "\t\t\t\t\t\t\tof($2StoreActions.addOneFailure({ error })),",
      "\t\t\t\t\t\t),",
      "\t\t\t\t\t);",
      "\t\t\t\t}),",
      "\t\t\t);",
      "\t\t},",
      "\t\t{ functional: true },",
      "\t);",
      "}",
      "",
      "export function provide$1Data(): EnvironmentProviders {",
      "\treturn makeEnvironmentProviders([",
      "\t\t$1ApiService,",
      "\t\tprovideState($2State),",
      "\t\tprovideEffects($2StoreEffects),",
      "\t]);",
      "}"
    ]
  }
}
