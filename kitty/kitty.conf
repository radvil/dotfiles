# vim:fileencoding=utf-8:ft=conf:foldmethod=marker

#: THEMES
include                     ./themes/dark/default.conf
dynamic_background_opacity  yes
background_opacity          0.90

#: Fonts {{{

font_family           JetBrainsMono Nerd Font
# font_family           FiraCode Nerd Font
font_size             13
adjust_line_height    0
disable_ligatures     never

#: }}}

#: Cursor customization {{{

cursor                #cccccc
cursor_text_color     #111111
cursor_shape          block

#: }}}

#: Mouse {{{

url_color             #0087bd
url_style             curly
#open_url_modifiers    kitty_mod

#: }}}

#: Terminal Bell {{{

enable_audio_bell     no
bell_on_tab           no

#: }}}

#: Window Layout {{{

remember_window_size              yes
initial_window_width              640
initial_window_height             400
enabled_layouts                   *
window_border_width               1
draw_minimal_border               no
window_margin_width               0
window_padding_width              0
placement_strategy                center
active_border_color               #6dd390
inactive_border_color             #cccccc
bell_border_color                 #ff5a00
hide_window_decoration            no

#: }}}

#: Tab Bar {{{

tab_bar_edge                      bottom
tab_bar_style                     powerline
tab_bar_min_tabs                  2
tab_switch_strategy               previous
tab_bar_margin_width              2
tab_separator                     " â”‡"
tab_title_template                {index} ðŸ”¥ {title}
active_tab_foreground             #111111
active_tab_background             #6dd390
active_tab_font_style             bold
inactive_tab_foreground           #f1f1f1
inactive_tab_background           #262626
inactive_tab_font_style           normal

#: }}}

#: Keyboard Shortcuts {{{

#: You can combine multiple actions to be triggered by a single
#: shortcut, using the syntax below::

#:     map key combine <separator> action1 <separator> action2 <separator> action3 ...

#: For example::

#:     map kitty_mod+e combine : new_window : next_layout

#: this will create a new window and switch to the next available
#: layout

#: You can use multi-key shortcuts using the syntax shown below::

#:     map key1>key2>key3 action

#: For example::

#:     map ctrl+f>2 set_font_size 20

clear_all_shortcuts           no
kitty_mod                     ctrl+shift

#: }}}

#: Clipboard {{{

# map kitty_mod+c               copy_to_clipboard
# map kitty_mod+s               paste_from_clipboard
# map kitty_mod+o               paste_selection_to_program

#: }}}

#: Scrolling {{{

map kitty_mod+k               scroll_line_up
map kitty_mod+j               scroll_line_down
# map kitty_mod+h               show_scrollback
# map kitty_mod+page_up         scroll_page_up
# map kitty_mod+page_down       scroll_page_down
# map kitty_mod+home            scroll_home
# map kitty_mod+end             scroll_end
#
#: }}}

#: Window Management {{{

map kitty_mod+enter           new_window_with_cwd
map kitty_mod+n               new_os_window_with_cwd

#: Works like new_window above, except that it opens a top level OS
#: kitty window. In particular you can use new_os_window_with_cwd to
#: open a window with the current working directory.

# map kitty_mod+w               close_window
map kitty_mod+[               previous_window
map kitty_mod+]               next_window
map kitty_mod+.               move_window_forward
map kitty_mod+,               move_window_backward
# map kitty_mod+`               move_window_to_top
map kitty_mod+r               start_resizing_window
map kitty_mod+1               first_window
map kitty_mod+2               second_window
map kitty_mod+3               third_window
map kitty_mod+4               fourth_window
map kitty_mod+5               fifth_window

#: }}}

#: Tab Management {{{

map kitty_mod+'               next_tab
map kitty_mod+;               previous_tab
map kitty_mod+t               new_tab_with_cwd
# map kitty_mod+q               close_tab
map kitty_mod+alt+t           set_tab_title

#: }}}

#: Layout Management {{{

map kitty_mod+l               next_layout
# map ctrl+alt+s                goto_layout stack
# map ctrl+alt+p                last_used_layout

#: }}}

#: Miscellaneous {{{

# map kitty_mod+f11             toggle_fullscreen
# map kitty_mod+f10             toggle_maximized
map kitty_mod+u               kitten unicode_input
map kitty_mod+f2              edit_config_file
# map kitty_mod+escape          kitty_shell window

#: Open the kitty shell in a new window/tab/overlay/os_window to
#: control kitty using commands.

map kitty_mod+f11             set_background_opacity -0.01
map kitty_mod+f12             set_background_opacity +0.01
map kitty_mod+f10             set_background_opacity 1
map kitty_mod+f5              set_background_opacity default

#: You can create shortcurs to clear/reset the terminal. For example::

#:    # Reset the terminal
#     map kitty_mod+f9 clear_terminal reset active
#     # Clear the terminal screen by erasing all contents
#     map kitty_mod+f11 clear_terminal clear active
#     # Clear the terminal scrollback by erasing it
#     map kitty_mod+f11 clear_terminal scrollback active
#     #Scrolle the contetnts of the screen into the scrollback
#     map kitty_mod+f12 clear_terminal scroll active

#: If you want to operate on all windows instead of just the current
#: one, use all instead of active.

#: }}}

# #: Advanced {{{

shell                             .
editor                            nvim
close_on_child_death              no
allow_remote_control              yes
linux_display_server              auto
shell_integration                 no-cursor

#: Allow other programs to control kitty. If you turn this on other
#: programs can control all aspects of kitty, including sending text
#: to kitty windows, opening new windows, closing windows, reading the
#: content of windows, etc.  Note that this even works over ssh
#: connections. You can chose to either allow any program running
#: within kitty to control it, with yes or only programs that connect
#: to the socket specified with the kitty --listen-on command line
#: option, if you use the value socket-only. The latter is useful if
#: you want to prevent programs running on a remote computer over ssh
#: from controlling kitty.

#: env variables

#:     env MYVAR1=a
#:     env MYVAR2=${MYVAR1}/${HOME}/b
#: The value of MYVAR2 will be a/<path to home directory>/b.

clipboard_control write-clipboard write-primary

#: Allow programs running in kitty to read and write from the
#: clipboard. You can control exactly which actions are allowed. The
#: set of possible actions is: write-clipboard read-clipboard write-
#: primary read-primary. You can additionally specify no-append to
#: disable kitty's protocol extension for clipboard concatenation. The
#: default is to allow writing to the clipboard and primary selection
#: with concatenation enabled. Note that enabling the read
#: functionality is a security risk as it means that any program, even
#: one running on a remote server via SSH can read your clipboard.
#: }}}
